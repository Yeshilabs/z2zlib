{"version":3,"sources":["../src/network/SignalingServer.ts","../src/network/WebRTCManager.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import { Server, Socket } from \"socket.io\";\nimport { RTCIceCandidate, SignalingEvents } from \"../types/SignalingTypes\";\n\nexport class SignalingServer extends Server {\n    // Static property to hold the Server instance\n    private static _instance: Server | null = null;\n\n    constructor(server: any) {\n        super(server); // Initialize the Server with the provided HTTP server\n        if (!SignalingServer._instance) {\n            SignalingServer._instance = this;\n        }\n        this.setupListeners();\n    }\n    public static get io(): Server | null {\n        if (!SignalingServer._instance) {\n            throw new Error(\"SignalingServer has not been initialized.\");\n        }\n        return SignalingServer._instance;\n    }\n\n    private setupListeners(): void {\n        this.on(\"connection\", (socket: Socket) => {\n            console.log(\"User connected:\", socket.id);\n            this.setupSocketEvents(socket);\n        });\n    }\n    private setupSocketEvents(socket: Socket): void {\n        socket.on(\"join\", (roomName: string) => {\n            console.log(\"User joined room:\", roomName);\n            const room = this.sockets.adapter.rooms.get(roomName);\n\n            if (!room) {\n                socket.join(roomName);\n                socket.emit(\"created\", roomName);\n                console.log(\"emmiting created\");\n\n                console.log(\"Room created:\", roomName);\n            } else if (room.size === 1) {\n                socket.join(roomName);\n                socket.emit(\"joined\", roomName);\n            } else {\n                socket.emit(\"full\", roomName);\n            }\n            //console.log(this.sockets.adapter.rooms);\n        });\n\n        socket.on(\"ready\", (roomName: string) => {\n            console.log(\"User is ready:\", roomName);\n            socket.broadcast.to(roomName).emit(\"ready\");\n        });\n\n        socket.on(\"ice-candidate\", (candidate: RTCIceCandidate, roomName: string) => {\n            console.log(\"Received ICE candidate:\", candidate);\n            socket.broadcast.to(roomName).emit(\"ice-candidate\", candidate);\n        });\n\n        socket.on(\"offer\", (offer: any, roomName: string) => {\n            console.log(\"Received offer:\", offer);\n            socket.broadcast.to(roomName).emit(\"offer\", offer);\n        });\n\n        socket.on(\"answer\", (answer: any, roomName: string) => {\n            console.log('SignalingServer: Received answer:', JSON.stringify(answer));\n            console.log('SignalingServer: Broadcasting to room:', roomName);\n            socket.broadcast.to(roomName).emit(\"answer\", answer);\n        });\n\n        socket.on(\"leave\", (roomName: string) => {\n            console.log(\"User left room:\", roomName);\n            socket.leave(roomName);\n            socket.broadcast.to(roomName).emit(\"leave\");\n        });\n    }\n    public broadcastEvent(roomName: string, event: keyof SignalingEvents, data: any): void {\n        this.to(roomName).emit(event, data);\n    }\n}\n\nexport default SignalingServer;","import { Socket } from 'socket.io-client';\nimport { JsonProof } from 'o1js';\n\nexport type JsonData = JsonProof | { [key: string]: any };\n\nexport function isJsonProof(data: unknown): data is JsonProof {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'publicInput' in data &&\n    'publicOutput' in data &&\n    'maxProofsVerified' in data &&\n    'proof' in data\n  );\n}\n\nexport class WebRTCManager {\n  private peerConnection: RTCPeerConnection | null = null;\n  dataChannel: RTCDataChannel | null = null;\n  private onMessageCallback: ((data: JsonData) => void) | null = null;\n  isHost: boolean = false;\n\n  constructor(\n    private socket: Socket,\n    private roomName: string,\n    private iceServers: RTCConfiguration = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    }\n  ) { }\n\n  init(): void {\n    console.log('Initializing WebRTCManager');\n    this.setupWSListeners();\n  }\n\n  private setupWSListeners = (): void => {\n    console.log('Setting up WebRTCManager listeners');\n    this.socket.on('connect', this.handleConnect);\n    this.socket.on('created', this.handleRoomCreated);\n    this.socket.on('joined', this.handleRoomJoined);\n    this.socket.on('ready', this.initiateCall);\n    this.socket.on('offer', this.handleOffer);\n    this.socket.on('answer', this.handleAnswer);\n    this.socket.on('ice-candidate', this.handleIceCandidate)\n    this.socket.on('leave', this.close);\n  }\n\n  private handleConnect = (): void => {\n    console.log('Connected to signaling server');\n    this.socket.emit('join', this.roomName);\n  }\n\n  private handleRoomCreated = (): void => {\n    console.log('Room created - You are the host!');\n    this.isHost = true;\n  }\n\n  private handleRoomJoined = (): void => {\n    console.log('Room joined - You are the peer');\n    this.isHost = false;\n    this.socket.emit('ready', this.roomName);\n  }\n\n  private initiateCall = async (): Promise<void> => {\n    if (this.isHost) {\n      try {\n        console.log(\"INSIDE INITIATE CALL FUNCTION\");\n        this.peerConnection = this.createPeerConnection();\n        const offer = await this.peerConnection.createOffer();\n        await this.peerConnection.setLocalDescription(offer);\n        console.log(\"HOST Sending offer:\", offer);\n        this.socket.emit('offer', offer, this.roomName);\n      } catch (error) {\n        console.error(\"Error initiating call:\", error);\n      }\n    }\n  };\n\n  private createPeerConnection = (): RTCPeerConnection => {\n    const connection = new RTCPeerConnection(this.iceServers);\n\n    connection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(\"Sending ICE candidate\");\n        this.socket.emit('ice-candidate', event.candidate, this.roomName);\n      }\n    };\n\n    connection.oniceconnectionstatechange = () => {\n      console.log('ICE Connection State:', connection.iceConnectionState);\n    };\n\n    if (this.isHost) {\n      console.log(\"Creating data channel as host\");\n      const dataChannel = connection.createDataChannel('jsonChannel');\n      this.dataChannel = dataChannel;\n      this.setupDataChannelListener(dataChannel);\n    } else {\n      console.log(\"Setting up data channel handler as peer\");\n      connection.ondatachannel = (dc) => {\n        this.dataChannel = dc.channel;\n        this.setupDataChannelListener(dc.channel);\n      };\n    }\n\n    return connection;\n  }\n\n  private setupDataChannelListener = (channel: RTCDataChannel): void => {\n    channel.onopen = () => console.log('Data channel opened');\n    channel.onclose = () => console.log('Data channel closed');\n    channel.onmessage = this.handleDataChannelMessage;\n  }\n\n  private handleDataChannelMessage = (event: MessageEvent): void => {\n    try {\n      const jsonData = JSON.parse(event.data);\n      if (this.onMessageCallback) {\n        this.onMessageCallback(jsonData);\n      } else {\n        console.log(\"Received JSON data : \", jsonData);\n      }\n    } catch (error) {\n      console.error(\"Error parsing message:\", error);\n    }\n  }\n\n  // private setupDataChannel(channel: RTCDataChannel): void {\n  //   channel.onopen = () => console.log('Data channel opened');\n  //   channel.onclose = () => console.log('Data channel closed');\n  //   channel.onmessage = (event: MessageEvent) => {\n  //     try {\n  //       const jsonData = JSON.parse(event.data);\n  //       if (this.onMessageCallback) {\n  //         this.onMessageCallback(jsonData);\n  //       }\n  //     } catch (error) {\n  //       console.error(\"Error parsing message:\", error);\n  //     }\n  //   };\n  // }\n\n  private handleOffer = async (offer: RTCSessionDescriptionInit): Promise<void> => {\n    //if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (this.isHost || this.peerConnection) return;\n    console.log(\"peer handling offer\")\n    this.peerConnection = this.createPeerConnection();\n\n    try {\n      // const sessionDescription = new RTCSessionDescription({\n      //   type: offer.type,\n      //   sdp: offer.sdp\n      // });\n      // await this.peerConnection.setRemoteDescription(sessionDescription);\n      await this.peerConnection.setRemoteDescription(offer);\n      const answer = await this.peerConnection.createAnswer();\n      this.socket.emit('answer', answer, this.roomName);\n      await this.peerConnection.setLocalDescription(answer);\n    } catch (error) {\n      console.error(\"Error handling offer:\", error);\n    }\n  }\n\n  private handleAnswer = async (answer: RTCSessionDescriptionInit): Promise<void> => {\n    if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (!this.isHost) throw new Error(\"Peer cannot handle answer\");\n\n    try {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      console.log(\"Remote description set successfully\");\n    } catch (error) {\n      console.error(\"Error handling answer:\", error);\n    }\n  }\n\n  private handleIceCandidate = async (candidate: RTCIceCandidateInit): Promise<void> => {\n    try {\n      if (this.peerConnection) {\n        if (this.peerConnection.remoteDescription) {\n          await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n        } else {\n          console.log(\"Queuing ICE candidate - no remote description\");\n        }\n      }\n    }\n    catch (error) {\n      console.error(\"Error handling ICE candidate:\", error);\n    }\n  };\n\n  private createAndSendOffer = async (): Promise<void> => {\n    if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (!this.isHost) return;\n\n    try {\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(offer);\n      this.socket.emit('offer', offer, this.roomName);\n    } catch (error) {\n      console.error(\"Error creating offer:\", error);\n    }\n  }\n\n  setOnMessageCallback = (callback: (data: JsonData) => void): void => {\n    this.onMessageCallback = callback;\n  }\n\n  sendData = (data: JsonData): void => {\n    if (this.dataChannel?.readyState === \"open\") {\n      this.dataChannel.send(JSON.stringify(data));\n    } else {\n      console.log(\"Data channel is not open - state :\", this.dataChannel?.readyState);\n      console.error(\"Data channel is not open - state :\", this.dataChannel?.readyState);\n    }\n  }\n\n  close = (): void => {\n    this.dataChannel?.close();\n    this.peerConnection?.close();\n    this.peerConnection = null;\n    this.dataChannel = null;\n  }\n}\n"]}