{"version":3,"sources":["../../src/network/SignalingServer.ts"],"names":["Server"],"mappings":"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","file":"index.cjs","sourcesContent":["import { Server as HTTPServer } from 'http';\nimport { Server, Socket } from \"socket.io\";\nimport { RTCIceCandidate, SignalingEvents } from \"../types/SignalingTypes\";\n\nexport class SignalingServer {\n    private static _instance: Server | null = null;\n    private io: Server;\n\n    constructor(httpServer: HTTPServer) {\n        this.io = new Server(httpServer, {\n            cors: {\n                origin: \"*\",\n                methods: [\"GET\", \"POST\"]\n            }\n        });\n\n        if (!SignalingServer._instance) {\n            SignalingServer._instance = this.io;\n        }\n\n        this.setupListeners();\n    }\n\n    public static get io(): Server | null {\n        return SignalingServer._instance;\n    }\n\n    private setupListeners(): void {\n        this.io.on(\"connection\", (socket: Socket) => {\n            console.log(\"User connected:\", socket.id);\n            this.setupSocketEvents(socket);\n        });\n    }\n\n\n private setupSocketEvents(socket: Socket): void {\n        socket.on(\"join\", (roomName: string) => {\n            console.log(\"User joined room:\", roomName);\n            const room = this.io.sockets.adapter.rooms.get(roomName);\n\n            if (!room) {\n                socket.join(roomName);\n                socket.emit(\"created\", roomName);\n                console.log(\"emmiting created\");\n\n                console.log(\"Room created:\", roomName);\n            } else if (room.size === 1) {\n                socket.join(roomName);\n                socket.emit(\"joined\", roomName);\n            } else {\n                socket.emit(\"full\", roomName);\n            }\n            //console.log(this.sockets.adapter.rooms);\n        });\n\n        socket.on(\"ready\", (roomName: string) => {\n            console.log(\"User is ready:\", roomName);\n            socket.broadcast.to(roomName).emit(\"ready\");\n        });\n\n        socket.on(\"ice-candidate\", (candidate: RTCIceCandidate, roomName: string) => {\n            console.log(\"Received ICE candidate:\", candidate);\n            socket.broadcast.to(roomName).emit(\"ice-candidate\", candidate);\n        });\n\n        socket.on(\"offer\", (offer: any, roomName: string) => {\n            console.log(\"Received offer:\", offer);\n            socket.broadcast.to(roomName).emit(\"offer\", offer);\n        });\n\n        socket.on(\"answer\", (answer: any, roomName: string) => {\n            console.log('SignalingServer: Received answer:', JSON.stringify(answer));\n            console.log('SignalingServer: Broadcasting to room:', roomName);\n            socket.broadcast.to(roomName).emit(\"answer\", answer);\n        });\n\n        socket.on(\"leave\", (roomName: string) => {\n            console.log(\"User left room:\", roomName);\n            socket.leave(roomName);\n            socket.broadcast.to(roomName).emit(\"leave\");\n        });\n    }\n    public broadcastEvent(roomName: string, event: keyof SignalingEvents, data: any): void {\n        this.io.to(roomName).emit(event, data);\n    }\n}\n\nexport default SignalingServer;\n\n"]}