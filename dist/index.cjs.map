{"version":3,"sources":["../src/network/SignalingServer.ts","../src/network/WebRTCManager.ts"],"names":["Server"],"mappings":"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","file":"index.cjs","sourcesContent":["import { Server, Socket } from \"socket.io\";\nimport { RTCIceCandidate, SignalingEvents } from \"../types/SignalingTypes\";\n\nexport class SignalingServer extends Server {\n    // Static property to hold the Server instance\n    private static _instance: Server | null = null;\n\n    constructor(server: any) {\n        super(server); // Initialize the Server with the provided HTTP server\n        if (!SignalingServer._instance) {\n            SignalingServer._instance = this;\n        }\n        this.setupListeners();\n    }\n    public static get io(): Server | null {\n        if (!SignalingServer._instance) {\n            throw new Error(\"SignalingServer has not been initialized.\");\n        }\n        return SignalingServer._instance;\n    }\n\n    private setupListeners(): void {\n        this.on(\"connection\", (socket: Socket) => {\n            console.log(\"User connected:\", socket.id);\n            this.setupSocketEvents(socket);\n        });\n    }\n    private setupSocketEvents(socket: Socket): void {\n        socket.on(\"join\", (roomName: string) => {\n            console.log(\"User joined room:\", roomName);\n            const room = this.sockets.adapter.rooms.get(roomName);\n\n            if (!room) {\n                socket.join(roomName);\n                socket.emit(\"created\", roomName);\n            } else if (room.size === 1) {\n                socket.join(roomName);\n                socket.emit(\"joined\", roomName);\n            } else {\n                socket.emit(\"full\", roomName);\n            }\n            //console.log(this.sockets.adapter.rooms);\n        });\n\n        socket.on(\"ready\", (roomName: string) => {\n            console.log(\"User is ready:\", roomName);\n            socket.broadcast.to(roomName).emit(\"ready\");\n        });\n\n        socket.on(\"ice-candidate\", (candidate: RTCIceCandidate, roomName: string) => {\n            console.log(\"Received ICE candidate:\", candidate);\n            socket.broadcast.to(roomName).emit(\"ice-candidate\", candidate);\n        });\n\n        socket.on(\"offer\", (offer: any, roomName: string) => {\n            console.log(\"Received offer:\", offer);\n            socket.broadcast.to(roomName).emit(\"offer\", offer);\n        });\n\n        socket.on(\"answer\", (answer: any, roomName: string) => {\n            console.log('SignalingServer: Received answer:', JSON.stringify(answer));\n            console.log('SignalingServer: Broadcasting to room:', roomName);\n            socket.broadcast.to(roomName).emit(\"answer\", answer);\n        });\n\n        socket.on(\"leave\", (roomName: string) => {\n            console.log(\"User left room:\", roomName);\n            socket.leave(roomName);\n            socket.broadcast.to(roomName).emit(\"leave\");\n        });\n    }\n    public broadcastEvent(roomName: string, event: keyof SignalingEvents, data: any): void {\n        this.to(roomName).emit(event, data);\n    }\n}\n\nexport default SignalingServer;","import { Socket } from 'socket.io-client';\nimport { JsonProof } from 'o1js';\n\nexport type JsonData = JsonProof | { [key: string]: any };\n\nexport function isJsonProof(data: unknown): data is JsonProof {\n  return (\n    typeof data === 'object' &&\n    data !== null &&\n    'publicInput' in data &&\n    'publicOutput' in data &&\n    'maxProofsVerified' in data &&\n    'proof' in data\n  );\n}\n\nexport class WebRTCManager {\n  private peerConnection: RTCPeerConnection | null = null;\n  private dataChannel: RTCDataChannel | null = null;\n  private onMessageCallback: ((data: JsonData) => void) | null = null;\n  private isHost: boolean = false;\n\n  constructor(\n    private socket: Socket,\n    private roomName: string,\n    private iceServers: RTCConfiguration = {\n      iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n    }\n  ) { \n    console.log(\"WebRTCManager created with room:\", roomName);\n\n  }\n\n  async init(isHost: boolean): Promise<void> {\n    this.isHost = isHost;\n    this.peerConnection = new RTCPeerConnection(this.iceServers);\n\n    this.peerConnection.onicecandidate = (event) => {\n      if (event.candidate) {\n        console.log(\"Sending ICE candidate\");\n        this.socket.emit('ice-candidate', event.candidate, this.roomName);\n      }\n    };\n\n    this.peerConnection.oniceconnectionstatechange = () => {\n      console.log('ICE Connection State:', this.peerConnection?.iceConnectionState);\n    };\n\n    if (this.isHost) {\n      console.log(\"Creating data channel as host\");\n      this.dataChannel = this.peerConnection.createDataChannel('jsonChannel');\n      this.setupDataChannel(this.dataChannel);\n    } else {\n      console.log(\"Setting up data channel handler as peer\");\n      this.peerConnection.ondatachannel = (event) => {\n        console.log(\"Received data channel\");\n        this.dataChannel = event.channel;\n        this.setupDataChannel(event.channel);\n      };\n    }\n  }\n\n\n  private setupDataChannel(channel: RTCDataChannel): void {\n    channel.onopen = () => console.log('Data channel opened');\n    channel.onclose = () => console.log('Data channel closed');\n    channel.onmessage = (event: MessageEvent) => {\n      try {\n        const jsonData = JSON.parse(event.data);\n        if (this.onMessageCallback) {\n          this.onMessageCallback(jsonData);\n        }\n      } catch (error) {\n        console.error(\"Error parsing message:\", error);\n      }\n    };\n  }\n\n  async handleOffer(offer: RTCSessionDescriptionInit): Promise<void> {\n    if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (this.isHost) return;\n\n    try {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n      const answer = await this.peerConnection.createAnswer();\n      await this.peerConnection.setLocalDescription(answer);\n      this.socket.emit('answer', answer, this.roomName);\n    } catch (error) {\n      console.error(\"Error handling offer:\", error);\n    }\n  }\n\n  async handleAnswer(answer: RTCSessionDescriptionInit): Promise<void> {\n    if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (!this.isHost) return;\n\n    try {\n      await this.peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n    } catch (error) {\n      console.error(\"Error handling answer:\", error);\n    }\n  }\n\n  async handleIceCandidate(candidate: RTCIceCandidateInit): Promise<void> {\n    try {\n      if (this.peerConnection?.remoteDescription) {\n        await this.peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n      } else {\n        console.log(\"Queuing ICE candidate - no remote description\");\n      }\n    } catch (error) {\n      console.error(\"Error handling ICE candidate:\", error);\n    }\n  }\n\n  async createAndSendOffer(): Promise<void> {\n    if (!this.peerConnection) throw new Error(\"PeerConnection not initialized\");\n    if (!this.isHost) return;\n\n    try {\n      const offer = await this.peerConnection.createOffer();\n      await this.peerConnection.setLocalDescription(offer);\n      this.socket.emit('offer', offer, this.roomName);\n    } catch (error) {\n      console.error(\"Error creating offer:\", error);\n    }\n  }\n\n  setOnMessageCallback(callback: (data: JsonData) => void): void {\n    this.onMessageCallback = callback;\n  }\n\n  sendData(data: JsonData): void {\n    if (this.dataChannel?.readyState === \"open\") {\n      this.dataChannel.send(JSON.stringify(data));\n    } else {\n      console.log(\"Data channel is not open - state :\", this.dataChannel?.readyState);\n      console.error(\"Data channel is not open - state :\", this.dataChannel?.readyState);\n    }\n  }\n\n  close(): void {\n    this.dataChannel?.close();\n    this.peerConnection?.close();\n    this.peerConnection = null;\n    this.dataChannel = null;\n  }\n}"]}