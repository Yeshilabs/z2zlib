type THandler<T = unknown> = (data: T) => void;
type TTrigger<T = unknown> = (data: T) => void;
type THandlerRace<T = unknown> = (data: T, eventName: string) => void;
type TTriggers<T extends string, U = unknown> = Record<T, TTrigger<U> | undefined>;
declare class Events<T extends readonly string[] = string[]> {
    triggers: TTriggers<T[number]>;
    private active;
    private eventHandlers;
    private readonly events;
    private readonly debug?;
    constructor(events: T, { debug }?: {
        debug?: (error: unknown) => void;
    });
    on<U = unknown>(eventName: T[number], handler: THandler<U>): () => void;
    once<U = unknown>(eventName: T[number], handler: THandler<U>): () => void;
    onceRace<U = unknown>(eventNames: T[number][], handler: THandlerRace<U>): () => void;
    wait<U = unknown>(eventName: T[number]): Promise<U>;
    off<U = unknown>(eventName: T[number], handler: THandler<U>): void;
    trigger<U = unknown>(eventName: T[number], data: U): void;
    eachTriggers(handler: (trigger: TTrigger, eventName: T[number]) => void): void;
    removeEventHandlers(): void;
    activate(): void;
    deactivate(): void;
    hasHandlers(eventName: T[number]): boolean;
    private getHandlers;
    private getTrigger;
    private initEventHandlers;
    private readonly resolveTrigger;
}
export default Events;
