var c = Object.defineProperty;
var a = (n, t, r) => t in n ? c(n, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : n[t] = r;
var i = (n, t, r) => a(n, typeof t != "symbol" ? t + "" : t, r);
const h = (n) => new Error(`Event ${n} not supported`);
class d {
  constructor(t, { debug: r } = {}) {
    i(this, "triggers");
    i(this, "active", !0);
    i(this, "eventHandlers");
    i(this, "events");
    i(this, "debug");
    i(this, "resolveTrigger", (t) => (e) => {
      if (!this.active)
        return;
      const s = this.getHandlers(t);
      for (const o of s)
        try {
          o(e);
        } catch (g) {
          if (this.debug)
            this.debug(g);
          else
            throw g;
        }
    });
    this.events = t, this.debug = r, this.eventHandlers = {}, this.triggers = {}, this.initEventHandlers(this.events);
  }
  on(t, r) {
    return this.getHandlers(t).push(r), () => {
      this.off(t, r);
    };
  }
  once(t, r) {
    const e = (s) => {
      this.off(t, e), r(s);
    };
    return this.on(t, e);
  }
  onceRace(t, r) {
    let e = [];
    const s = () => {
      for (const o of e)
        o();
    };
    return e = t.map((o) => this.once(o, (g) => {
      s(), r(g, o);
    })), s;
  }
  async wait(t) {
    return new Promise((r) => {
      this.once(t, r);
    });
  }
  off(t, r) {
    const e = this.getHandlers(t);
    this.eventHandlers[t] = e.filter((s) => s !== r);
  }
  trigger(t, r) {
    this.getTrigger(t)(r);
  }
  eachTriggers(t) {
    const r = Object.entries(this.triggers);
    for (const [e, s] of r)
      t(s, e);
  }
  removeEventHandlers() {
    this.initEventHandlers(this.events);
  }
  activate() {
    this.active = !0;
  }
  deactivate() {
    this.active = !1;
  }
  hasHandlers(t) {
    return this.getHandlers(t).length > 0;
  }
  getHandlers(t) {
    const r = this.eventHandlers[t];
    if (!r)
      throw h(t);
    return r;
  }
  getTrigger(t) {
    if (!this.triggers[t])
      throw h(t);
    return this.triggers[t];
  }
  initEventHandlers(t) {
    for (const r of t)
      this.eventHandlers[r] = [], this.triggers[r] = this.resolveTrigger(r);
  }
}
export {
  d as default
};
