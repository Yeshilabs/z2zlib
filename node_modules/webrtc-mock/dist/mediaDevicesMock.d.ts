type TEventNames = typeof eventsNames;
type TEventName = TEventNames[number];
type THandler = (event: Event) => void;
declare const eventsNames: readonly ["devicechange"];
declare class MediaDevicesMock {
    private readonly events;
    getDisplayMedia: (constraints: MediaStreamConstraints) => Promise<MediaStream>;
    constructor();
    getUserMedia: (constraints: MediaStreamConstraints) => Promise<import('./MediaStreamMock').default>;
    enumerateDevices: () => Promise<MediaDeviceInfo[]>;
    addEventListener: (eventName: TEventName, handler: THandler) => void;
    removeEventListener: (eventName: TEventName, handler: THandler) => void;
    setCountVideoDevicesAvailable: (count: number) => void;
    setCountAudioInDevicesAvailable: (count: number) => void;
    setCountAudioOutDevicesAvailable: (count: number) => void;
    setBusyVideoDevice: (deviceId: string) => void;
    setNotFoundVideoDevice: (deviceId: string) => void;
    setPermissionDeniedBySystem: (deviceId: string) => void;
    setUserNotAccessVideo: (notAccess?: boolean) => void;
    setUserNotAccessAudioIn: (notAccess?: boolean) => void;
    setUserNotAccessAll: (notAccess?: boolean) => void;
    unsetAllRestrictions: () => void;
    unsetBusyVideoDevice: (deviceId: string) => void;
    unsetNotFoundVideoDevice: (deviceId: string) => void;
    unsetPermissionDeniedBySystem: (deviceId: string) => void;
}
export default MediaDevicesMock;
