import { TCapabilities } from './Capabilities';
import { MediaStreamUnionTrack } from './types';
declare const eventsNames: readonly ["ended", "mute", "unmute", "isolationchange", "overconstrained"];
type TEventNames = typeof eventsNames;
type TEventName = TEventNames[number];
type THandler = (event: Event) => void;
export declare const setCapabilities: (value: TCapabilities) => void;
export declare const resetCapabilities: () => void;
export declare const setMinWidthCapabilities: (value: number) => void;
export declare const setMaxWidthCapabilities: (value: number) => void;
export declare const setMinHeightCapabilities: (value: number) => void;
export declare const setMaxHeightCapabilities: (value: number) => void;
export type TOptions = {
    id?: string;
    constraints?: MediaTrackConstraints;
};
declare class MediaStreamTrackMock<T extends 'audio' | 'video' = 'video' | 'audio'> implements MediaStreamUnionTrack {
    private readonly events;
    id: string;
    kind: T;
    constraints: MediaTrackConstraints;
    enabled: boolean;
    contentHint: string;
    readyState: MediaStreamTrackState;
    isolated: boolean;
    label: string;
    muted: boolean;
    onended: ((this: MediaStreamTrack, event_: Event) => unknown) | null;
    onisolationchange: ((this: MediaStreamTrack, event_: Event) => unknown) | null;
    onmute: ((this: MediaStreamTrack, event_: Event) => unknown) | null;
    onunmute: ((this: MediaStreamTrack, event_: Event) => unknown) | null;
    constructor(kind: T, { id, constraints }?: TOptions);
    clone(): this;
    getCapabilities(): MediaTrackCapabilities;
    getSettings(): MediaTrackSettings;
    applyConstraints(constraints: MediaTrackConstraints): Promise<void>;
    getConstraints: () => MediaTrackConstraints;
    stop: () => void;
    addEventListener: (eventName: TEventName, handler: THandler) => void;
    removeEventListener: (eventName: TEventName, handler: THandler) => void;
    dispatchEvent(event: Event): boolean;
}
export default MediaStreamTrackMock;
