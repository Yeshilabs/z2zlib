import { MediaStreamUnionTrack } from './types';
declare const eventsNames: readonly ["addtrack", "removetrack"];
type TEventNames = typeof eventsNames;
type TEventName = TEventNames[number];
type THandler = (event: Event) => void;
declare class MediaStreamMock implements MediaStream {
    private readonly events;
    private tracks;
    id: string;
    active: boolean;
    constructor(tracks?: MediaStreamUnionTrack[]);
    onaddtrack: ((this: MediaStream, event_: MediaStreamTrackEvent) => unknown) | null;
    onremovetrack: ((this: MediaStream, event_: MediaStreamTrackEvent) => unknown) | null;
    getTracks: () => MediaStreamUnionTrack[];
    getAudioTracks: () => MediaStreamAudioTrack[];
    getVideoTracks: () => MediaStreamVideoTrack[];
    addTrack: (track: MediaStreamUnionTrack) => this;
    removeTrack(track: MediaStreamTrack): this;
    addEventListener: (eventName: TEventName, handler: THandler) => void;
    removeEventListener: (eventName: TEventName, handler: THandler) => void;
    dispatchEvent(event: Event): boolean;
    clone(): this;
    getTrackById(trackId: string): MediaStreamTrack | null;
}
export default MediaStreamMock;
